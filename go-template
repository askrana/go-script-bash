#! /usr/bin/env bash
#
# Template for a Bash program based on the go-script-bash framework
#
# You should replace this comment with your own program's high-level
# description. You may remove any other comments from this template as well.
#
# This template automatically checks for the presence of the go-script-bash
# sources and makes a shallow clone of the the go-script-bash repository if
# necessary before dispatching commands. (If you prefer, you can change the
# logic to create a regular clone instead.) This allows users to set up the
# framework without taking any extra steps when running the command for the
# first time, without the need to commit the framework to your repository.
#
# Alternatively, you can make the `GO_SCRIPT_BASH_REPO_URL` a Git submodule of
# your project or check in a versioned copy of the sources. See the "How to use
# this framework" section of `README.md` for details.
#
# Make sure the `_GO_STANDALONE`, `SCRIPTS_DIR`, and `GO_SCRIPT_BASH_VERSION`
# variables within this script are configured as necessary for your program.
# You can also add any other initialization or configuration logic between:
#
#   . "$_GO_SCRIPT_BASH_CORE" "${SCRIPTS_DIR##*/}"`
#   `@go "$@"`

# Set `_GO_STANDALONE='true'` if your program isn't a project-specific script.
readonly _GO_STANDALONE=

# Set SCRIPTS_DIR to the path where your command scripts reside.
#
# For `_GO_STANDALONE` programs and plugins containing command scripts, you may
# wish to set SCRIPTS_DIR to end with `bin` and have a separate `./go` script to
# manage project tasks that finds its command scripts in `scripts`.
readonly SCRIPTS_DIR="${0%/*}/scripts"

# Set this to the `GO_SCRIPT_BASH_REPO_URL` tag or branch you wish to use.
readonly GO_SCRIPT_BASH_VERSION='v1.3.0'

readonly GO_SCRIPT_BASH_CORE="$SCRIPTS_DIR/go-script-bash/go-core.bash"
readonly GO_SCRIPT_BASH_REPO_URL='https://github.com/mbland/go-script-bash.git'

if [[ ! -e "$GO_SCRIPT_BASH_CORE" ]]; then
  printf 'Cloning %s into %s...\n' "$GO_SCRIPT_BASH_REPO_URL" \
    "${GO_SCRIPT_BASH_CORE%/*}"
  if ! git clone --depth 1 -c advice.detachedHead=false \
      -b "$GO_SCRIPT_BASH_VERSION" "$GO_SCRIPT_BASH_REPO_URL" \
      "${GO_SCRIPT_BASH_CORE%/*}" &>/dev/null; then
    printf 'Failed to clone %s; aborting.\n' "$GO_SCRIPT_BASH_REPO_URL" >&2
    exit 1
  fi
fi

. "$GO_SCRIPT_BASH_CORE" "${SCRIPTS_DIR##*/}"
# Add any other configuration or initialization steps here.
@go "$@"
