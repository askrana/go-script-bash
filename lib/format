#! /bin/bash
#
# Text formatting utilities
#
# Exports:
#
#   @go.pad_items
#     Pads each string in an array to match the length of the longest element
#
#   @go.zip_items
#     Concatenates parallel elements from each input array
#
#   @go.strip_formatting_codes
#     Strips ANSI escape codes of the form `\e[...(;...)m` from a string

. "$_GO_USE_MODULES" 'validation'

# Pads each string in an array to match the length of the longest element
#
# Arguments:
#   items:   Name of the input array in the caller's scope
#   result:  Name of the caller-declared output array
@go.pad_items() {
  @go.validate_identifier_or_die 'Result variable name' "$2"
  local items_reference="${1}[@]"
  local item
  local padding_size=0
  local pad_format=''
  local item_index=0

  for item in "${!items_reference}"; do
    while [[ "$padding_size" -lt "${#item}" ]]; do
      padding_size="${#item}"
    done
  done
  pad_format="%-${padding_size}s"

  for item in "${!items_reference}"; do
    printf -v "$2[$((item_index++))]" -- "$pad_format" "$item"
  done
}

# Concatenates parallel elements from each input array
#
# Will produce a number of results matching that of the left-hand input array.
#
# Arguments:
#   lhs:     Name of the left-hand input array in the caller's scope
#   rhs:     Name of the right-hand input array in the caller's scope
#   delim:   String used as a delimiter between elements (default: two spaces)
#   result:  Name of the caller-declared output array
@go.zip_items() {
  @go.validate_identifier_or_die 'Result variable name' "$4"
  local lhs_array_reference="${1}[@]"
  local rhs_item_ref
  local item
  local i=0

  for item in "${!lhs_array_reference}"; do
    rhs_item_ref="${2}[$i]"
    printf -v "$4[$((i++))]" -- '%s' "${item}${3}${!rhs_item_ref}"
  done
}

# Strips ANSI escape codes from a string
#
# Used primarily by `@go.log`.
#
# Arguments:
#   original:  The string to strip
#   result:    Name of the caller-declared output variable
@go.strip_formatting_codes() {
  @go.validate_identifier_or_die 'Result variable name' "$2"
  printf -v "$2" -- '%b' "$1"

  if [[ -z "$__GO_STRIP_FORMATTING_PATTERN" ]]; then
    printf -v __GO_STRIP_FORMATTING_PATTERN '%b' '\e[[0-9]{1,3}(;[0-9]{1,3})*m'
    readonly __GO_STRIP_FORMATTING_PATTERN
  fi

  while [[ "${!2}" =~ $__GO_STRIP_FORMATTING_PATTERN ]]; do
    printf -v "$2" -- '%s' "${!2/"${BASH_REMATCH[0]}"}"
  done
}
