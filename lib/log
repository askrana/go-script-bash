#! /bin/bash
#
# Standard logging
#
# Exports:
#   @go.log
#     Outputs a log line; supports terminal formatting and format stripping
#
#   @go.log_timestamp
#     Prints a timestamp using _GO_LOG_TIMESTAMP_FORMAT (strftime format)
#
#   @go.add_or_update_log_level
#     Modifies existing log level labels, formatting, and file descriptors
#
#   @go.log_command
#     Logs a command and its outcome
#
#   @go.critical_section_begin
#     Causes @go.log_command to log FATAL on error
#
#   @go.critical_section_end
#     Cause @go.log_command to log ERROR on error
#
#   @go.setup_project
#     Runs the project's 'setup' script and logs the result
#
# The log level labels are formatted when output to a terminal, and formatting
# can be forced when writing to a pipe or file by setting `_GO_LOG_FORMATTING`.
#
# `@go.log ERROR` will return an error code, so you may use it in conditional
# statements. `@go.log FATAL` will exit the process.
#
# You can pass entire commands to the `@go.log_command` function, which will
# provide log messages upon startup and completion. Upon error, it will log the
# status and return an error code, so you may use it in conditional statements.
# Wrapping blocks of `@go.log_command` invocations in
# `@go.critical_section_begin` and `@go.critical_section_end` will cause any
# errors to log `FATAL`. Setting `_GO_DRY_RUN` will log the commands without
# executing them.
#
# The `@go.setup_project` function provides a convenient wrapper for running
# first-time project setup scripts. It logs the start and finish of the setup
# script, and provides helpful hints on running the `./go` script upon success.
#
# See the function and variable comments from this file for further information.

# A strftime-compatible date/time format string used to prefix log messages with
# a timestamp. E.g.: '%Y-%m-%d %H:%M:%S'
#
# If left undefined, log messages are not prefixed with timestamps.
readonly _GO_LOG_TIMESTAMP_FORMAT="$_GO_LOG_TIMESTAMP_FORMAT"

# Set this if you want to force terminal-formatted output from @go.log.
#
# @go.log will remove terminal formatting codes by default when the output file
# descriptor is not a terminal. Can be set either in the script or on the
# command line.
readonly _GO_LOG_FORMATTING="$_GO_LOG_FORMATTING"

# If not empty, @go.log_command will only print the command and not execute it.
#
# Can be set either in the script or on the command line.
readonly _GO_DRY_RUN="$_GO_DRY_RUN"

# Default log level labels
#
# DO NOT UPDATE DIRECTLY: Use @go.add_or_update_log_level instead.
export _GO_LOG_LEVELS=(
  'INFO'
  'RUN'
  'WARN'
  'ERROR'
  'FATAL'
  'START'
  'FINISH'
)

# Default log level terminal format codes
export __GO_LOG_LEVELS_FORMAT_CODES=(
  '\e[1m\e[36m'
  '\e[1m\e[35m'
  '\e[1m\e[33m'
  '\e[1m\e[31m'
  '\e[1m\e[31m'
  '\e[1m\e[32m'
  '\e[1m\e[32m'
)

# Default log level output file descriptors
#
# '1' is standard output and '2' is standard error.
export __GO_LOG_LEVELS_FILE_DESCRIPTORS=(
  '1'
  '1'
  '1'
  '2'
  '2'
  '1'
  '1'
)

# DO NOT EDIT: Initialized by @go.log
export __GO_LOG_LEVELS_FORMATTED=()

# Set by @go.critical_section_{begin,end}
export __GO_CRITICAL_SECTION=0

# DO NOT EDIT: Determines number of stack trace levels to skip for FATAL logs.
export __GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS=1

# Outputs a single log line that may contain terminal control characters.
#
# Usage:
#
#   @go.log <log-level> args...
#   @go.log <ERROR|FATAL> [exit-status] args...
#
# Where:
#
#   <log-level>    A label from _GO_LOG_LEVELS
#   <exit-status>  The exit status number to return from an ERROR or FATAL call
#   args...        Arguments comprising the log record text
#
# Will automatically format the '<log-level>' label if writing to the terminal
# or _GO_LOG_FORMATTING is set. Will automatically strip format codes from the
# remaining arguments if not writing to the terminal and _GO_LOG_FORMATTING is
# empty.
#
# If the first argument is ERROR or FATAL, the second argument is the exit
# status, and the remainder of the arguments comprise the log record. The exit
# status will be appended to the log record if it is not the empty string.
#
# ERROR will cause @go.log to return the exit status; FATAL will exit the
# process with the exit status. If the exit status is the empty string, it will
# default to 1.
#
# If you want to add a custom log level, or change an existing log level, do so
# using @go.add_or_update_log_level before the first call to @go.log, most
# likely in your ./go script.
#
# Arguments:
#   $1: log level label; will be converted to all-uppercase
#   $2: exit status if $1 is ERROR or FATAL; first log record element otherwise
#   $3..$#: remainder of the log record
@go.log() {
  local args=("$@")
  local log_level="${args[0]^^}"
  local exit_status=0
  local log_msg
  local unformatted_log_msg
  local level_fd

  unset 'args[0]'
  _@go.log_init

  local __go_log_level_index=0
  if ! _@go.log_level_index "$log_level"; then
    @go.log ERROR "Unknown log level $log_level; defaulting to WARN"
    @go.log WARN "${args[@]}"
    return 1
  fi

  if [[ "$log_level" =~ ERROR|FATAL ]]; then
    exit_status="${args[1]}"

    if [[ -n "$exit_status" && "$exit_status" =~ ^-?[0-9]+$ ]]; then
      unset 'args[1]'
      args+=("(exit status $exit_status)")
    else
      exit_status=1
    fi
  fi

  # Remove leading space if the timestamp is empty.
  log_msg="$(@go.log_timestamp) "
  log_msg="${log_msg# }${__GO_LOG_LEVELS_FORMATTED[$__go_log_level_index]}"
  log_msg="${log_msg} ${args[*]}\\e[0m\\n"

  for level_fd in $(_@go.log_level_file_descriptors "$__go_log_level_index"); do
    if [[ ! -t "$level_fd" && -z "$_GO_LOG_FORMATTING" ]]; then
      if [[ -z "$unformatted_log_msg" ]]; then
        unformatted_log_msg="${log_msg//\\e\[[0-9]m}"
        unformatted_log_msg="${unformatted_log_msg//\\e\[[0-9][0-9]m}"
        unformatted_log_msg="${unformatted_log_msg//\\e\[[0-9][0-9][0-9]m}"
      fi
      printf "$unformatted_log_msg" >&"$level_fd"
    else
      printf "$log_msg" >&"$level_fd"
    fi

    if [[ "$log_level" == 'FATAL' ]]; then
      @go.print_stack_trace "$__GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS" \
        >&"$level_fd"
    fi
  done

  if [[ "$log_level" == 'FATAL' ]]; then
    exit "$exit_status"
  fi
  return "$exit_status"
}

# Prints a timestamp using _GO_LOG_TIMESTAMP_FORMAT (strftime format)
#
# Prints nothing if:
#   - _GO_LOG_TIMESTAMP_FORMAT isn't set
#   - _GO_LOG_TIMESTAMP_FORMAT is set, but both the builtin
#     `printf '%(datefmt)T'` format and `date` command are missing
#
# Globals:
#   _GO_LOG_TIMESTAMP_FORMAT:  A strftime-compatible format string
@go.log_timestamp() {
  _@go.log_init

  case "$__GO_LOG_TIMESTAMP_IMPL" in
  printf)
    printf "%($_GO_LOG_TIMESTAMP_FORMAT)T"
    ;;
  date)
    date "+$_GO_LOG_TIMESTAMP_FORMAT"
    ;;
  esac
}

# Adds a new log level or updates an existing one.
#
# If you wish to keep the existing format code or file descriptor, specify
# 'keep' as the second argument or third argument, respectively.
#
# Arguments:
#   $1: The log level label
#   $2: The terminal format code that should precede the label
#   $3: The file descriptor to which to output level messages (defaults to 1)
@go.add_or_update_log_level() {
  local log_level="$1"
  local format_code="$2"
  local level_fd="${3:-1}"
  ((++__GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS))

  if [[ -n "$__GO_LOG_INIT" ]]; then
    @go.log FATAL "Can't set logging level $log_level; already initialized"
  elif [[ "$level_fd" != 'keep' && ! "$level_fd" =~ ^[1-9]+[0-9]*$ ]]; then
    @go.log FATAL "File descriptor $level_fd for $log_level must be > 0"
  elif ! echo -n 2>/dev/null >&"$level_fd"; then
    @go.log FATAL "File descriptor $level_fd for $log_level isn't open"
  fi
  ((--__GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS))

  local __go_log_level_index=0
  if ! _@go.log_level_index "$log_level"; then
    if [[ "$format_code" == 'keep' || "$level_fd" == 'keep' ]]; then
      ((++__GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS))
      @go.log FATAL "Can't keep defaults for nonexistent log level $log_level"
    fi
    _GO_LOG_LEVELS+=("$log_level")
    __GO_LOG_LEVELS_FORMAT_CODES+=("$format_code")
    __GO_LOG_LEVELS_FILE_DESCRIPTORS+=("$level_fd")
    return
  fi

  _GO_LOG_LEVELS[$__go_log_level_index]="$log_level"

  if [[ "$format_code" != 'keep' ]]; then
    __GO_LOG_LEVELS_FORMAT_CODES[$__go_log_level_index]="$format_code"
  fi
  if [[ "$level_fd" != 'keep' ]]; then
    __GO_LOG_LEVELS_FILE_DESCRIPTORS[$__go_log_level_index]="$level_fd"
  fi
}

# Sets @go.log_command to log FATAL when its command exits with an error status.
@go.critical_section_begin() {
  ((++__GO_CRITICAL_SECTION))
}

# Sets @go.log_command to log ERROR when its command exits with an error status.
@go.critical_section_end() {
  if [[ "$__GO_CRITICAL_SECTION" -ne '0' ]]; then
    ((--__GO_CRITICAL_SECTION))
    return 0
  fi
}

# Logs the specified command and its outcome.
#
# By default it will log ERROR and return the command's exit status on failure.
# In between calls to @go.critical_section_begin and @go.critical_section_end,
# it will instead log FATAL and exit the process with the command's status code.
#
# `./go` script commands can be invoked using `@go`. Note that this means all of
# the logging variables and flags set in parent commands apply directly to `@go`
# commands written in Bash, but not other languages. Most notably, the state of
# the critical section flag will be shared between parent and child Bash
# scripts.
#
# Globals:
#   _GO_DRY_RUN:           Will log commands without running them
#   __GO_CRITICAL_SECTION: Will log FATAL on error
#
# Arguments:
#   $@: The command and its arguments to log and execute
@go.log_command() {
  local args=("$@")
  local cmd_string="${args[*]}"
  local exit_status

  if [[ "${args[0]}" == '@go' ]]; then
    cmd_string="$_GO_CMD ${args[*]:1}"
  fi
  @go.log RUN "$cmd_string"

  if [[ -n "$_GO_DRY_RUN" ]]; then
    return
  fi

  "${args[@]}"
  exit_status="$?"

  if [[ "$exit_status" -ne '0' ]]; then
    if [[ "$__GO_CRITICAL_SECTION" -ne '0' ]]; then
      ((++__GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS))
      @go.log FATAL "$exit_status" "$cmd_string"
    fi
    @go.log ERROR "$exit_status" "$cmd_string"
  fi
}

# Runs the project's setup script and logs the result.
#
# Helps with automating and logging project setup steps upon running the ./go
# script in a freshly-cloned repository for the first time, and providing the
# user with useful hints on how to use the ./go script upon success.
#
# If the setup script returns an error, the process will exit with the status
# code returned by the script.
#
# For example, in a Node.js project, your ./go script may include the following:
#
#   export PATH="node_modules/.bin:$PATH"
#   if [[ ! -d 'node_modules' ]]; then
#     @go.setup_project 'setup'
#   else
#     @go "$@"
#   fi
#
# And your `$_GO_SCRIPTS_DIR/setup` script may include (assuming your own `test`
# script as well):
#
#   @go.critical_section_begin
#   @go.log_command npm install
#   @go.log_command @go test
#   @go.critical_section_end
#
# Arguments:
#   $1:   The path of setup script relative to the project scripts directory
#   ...:  Any arguments to pass through to the 'setup' script
@go.setup_project() {
  local setup_script="$_GO_SCRIPTS_DIR/$1"
  local setup_status
  shift

  @go.log START Project setup in "$_GO_ROOTDIR"

  ((++__GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS))
  if [[ ! -f "$setup_script" ]]; then
    @go.log FATAL "Create $setup_script before invoking $FUNCNAME."
  elif  [[ ! -x "$setup_script" ]]; then
    @go.log FATAL "$setup_script is not executable."
  fi
  ((--__GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS))

  @go.log RUN "${setup_script#$_GO_ROOTDIR/}" "$@"
  _@go.run_command_script "$setup_script" "$@"
  setup_status="$?"

  if [[ "$setup_status" -ne '0' ]]; then
    ((++__GO_LOG_FATAL_STACK_TRACE_SKIP_CALLERS))
    @go.log FATAL "$setup_status" "Project setup failed"
  fi

  @go.log FINISH Project setup successful
  @go.log INFO "Run \`$0 help\` to see the available commands."

  if [[ "$_GO_CMD" == "$0" ]]; then
    @go.log INFO \
      "Run \`$0 help env\` to see how to set up your shell environment" \
      'for this project.'
  fi
}

# --------------------------------
# IMPLEMENTATION - HERE BE DRAGONS
#
# None of the functions below this line are part of the public interface.
# --------------------------------

# Initializes the logging system variables
#
# May be called multiple times; initialization will only happen once.
_@go.log_init() {
  if [[ -n "$__GO_LOG_INIT" ]]; then
    return
  fi

  _@go.log_format_level_labels

  if [[ -z "$_GO_LOG_TIMESTAMP_FORMAT" ]]; then
    readonly __GO_LOG_TIMESTAMP_IMPL='none'
  elif printf "%('%Y')T" &>/dev/null; then
    readonly __GO_LOG_TIMESTAMP_IMPL='printf'
  elif command -v 'date' >/dev/null; then
    readonly __GO_LOG_TIMESTAMP_IMPL='date'
  else
    readonly __GO_LOG_TIMESTAMP_IMPL='none'
    __GO_LOG_INIT='done' @go.log WARN \
      Builtin timestamps not supported and date command not found.
  fi

  readonly __GO_LOG_INIT='done'
}

# Assigns formatted log level labels to __GO_LOG_LEVELS_FORMATTED.
#
# If `_GO_LOG_FORMATTING` is not empty, or the file descriptor corresponding to
# a log level corresponds to a terminal, this will assign a corresponding value
# wrapped by terminal formatting codes to __GO_LOG_LEVELS_FORMATTED. Otherwise
# the original label value is assigned.
#
# Each element of `__GO_LOG_LEVELS_FORMATTED` will also be padded with trailing
# spaces so that each element will be the same length.
#
# Globals:
#   _GO_LOG_LEVELS:                    List of valid log level labels
#   _GO_LOG_FORMATTING                 If set, always produce formatted labels
#   __GO_LOG_LEVELS_FORMAT_CODES:      Terminal format codes for each log level
#   __GO_LOG_LEVELS_FILE_DESCRIPTORS:  Output descriptors for each log level
#   __GO_LOG_LEVELS_FORMATTED:         Formatted labels
_@go.log_format_level_labels() {
  local num_levels="${#_GO_LOG_LEVELS[@]}"
  local label_length
  local longest_label_length
  local padding=''
  local log_level
  local padding_len
  local level_var
  local level_fd
  local i

  for ((i=0; i != num_levels; ++i)); do
    label_length="${#_GO_LOG_LEVELS[$i]}"
    if [[ "$label_length" -gt "$longest_label_length" ]]; then
      longest_label_length="$label_length"
    fi
  done

  for ((i=0; i != longest_label_length; ++i)); do
    padding+=' '
  done

  for ((i=0; i != num_levels; ++i)); do
    log_level="${_GO_LOG_LEVELS[$i]}"
    padding_len="$((${#padding} - ${#log_level}))"

    for level_fd in $(_@go.log_level_file_descriptors "$i"); do
      if [[ -n "$_GO_LOG_FORMATTING" || -t "$level_fd" ]]; then
        log_level="${__GO_LOG_LEVELS_FORMAT_CODES[$i]}$log_level\e[0m"
        break
      fi
    done
    __GO_LOG_LEVELS_FORMATTED[$i]="${log_level}${padding:0:$padding_len}"
  done
}

# Returns the set of file descriptors for the specified log level index.
#
# Arguments:
#   index:  A log level index returned from _@go.log_level_index
_@go.log_level_file_descriptors() {
  local IFS=','
  echo ${__GO_LOG_LEVELS_FILE_DESCRIPTORS[$1]}
}

# Sets the index into the __GO_LOG arrays for the specified label
#
#
# Globals:
#   __go_log_level_index:  Variable into which the label's index will be stored
#
# Arguments:
#   $1:  The log level label to look up
#
# Returns:
#   0:  if the label exists
#   1:  if the label does not exist
_@go.log_level_index() {
  local i
  for ((i=0; i != "${#_GO_LOG_LEVELS[@]}"; ++i)); do
    if [[ "${_GO_LOG_LEVELS[$i]}" == "$1" ]]; then
      __go_log_level_index="$i"
      return
    fi
  done
  return 1
}

# Sanity check that the __GO_LOG arrays are all of the same size
#
# Will cause the process to exit with an error message and status if not.
_@go.log_load() {
  local num_levels="${#_GO_LOG_LEVELS[@]}"

  if [[ "${#__GO_LOG_LEVELS_FORMAT_CODES[@]}" != "$num_levels" ]]; then
    echo "Should have $num_levels log level format codes," \
      "only have ${#__GO_LOG_LEVELS_FORMAT_CODES[@]}" >&2
    exit 1
  elif [[ "${#__GO_LOG_LEVELS_FILE_DESCRIPTORS[@]}" != "$num_levels" ]]; then
    echo "Should have $num_levels log level file descriptors," \
      "only have ${#__GO_LOG_LEVELS_FILE_DESCRIPTORS[@]}" >&2
    exit 1
  fi
}

_@go.log_load
